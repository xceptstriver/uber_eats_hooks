{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":19,"column":0},"end":{"line":19,"column":77}}]}},{"name":"react-native/Libraries/Utilities/binaryToBase64","data":{"asyncType":null,"locs":[{"start":{"line":19,"column":0},"end":{"line":19,"column":77}}]}},{"name":"./promise","data":{"asyncType":null,"locs":[{"start":{"line":89,"column":41},"end":{"line":89,"column":53},"identifierName":"promiseDefer"}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _binaryToBase = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"react-native/Libraries/Utilities/binaryToBase64\"));\n\n  var CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function btoa(input) {\n    var map;\n    var i = 0;\n    var block = 0;\n    var output = '';\n\n    for (block = 0, i = 0, map = CHARS; input.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n      var charCode = input.charCodeAt(i += 3 / 4);\n\n      if (charCode > 0xff) {\n        throw new Error(\"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  }\n\n  function atob(input) {\n    var i = 0;\n    var bc = 0;\n    var bs = 0;\n    var buffer;\n    var output = '';\n    var str = input.replace(/[=]+$/, '');\n\n    if (str.length % 4 === 1) {\n      throw new Error(\"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (bc = 0, bs = 0, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      buffer = CHARS.indexOf(buffer);\n    }\n\n    return output;\n  }\n\n  function fromData(data) {\n    if (data instanceof Blob) {\n      var fileReader = new FileReader();\n\n      var _promiseDefer = (0, _$$_REQUIRE(_dependencyMap[2], \"./promise\").promiseDefer)(),\n          resolve = _promiseDefer.resolve,\n          reject = _promiseDefer.reject,\n          promise = _promiseDefer.promise;\n\n      fileReader.readAsDataURL(data);\n\n      fileReader.onloadend = function onloadend() {\n        resolve({\n          string: fileReader.result,\n          format: 'data_url'\n        });\n      };\n\n      fileReader.onerror = function onerror(event) {\n        fileReader.abort();\n        reject(event);\n      };\n\n      return promise;\n    }\n\n    if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n      return Promise.resolve({\n        string: (0, _binaryToBase.default)(data),\n        format: 'base64'\n      });\n    }\n\n    throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n  }\n\n  var _default = {\n    btoa: btoa,\n    atob: atob,\n    fromData: fromData\n  };\n  exports.default = _default;\n});","lineCount":91,"map":[[7,0,19,0],[9,0,22,0],[9,6,22,6,"CHARS"],[9,11,22,11],[9,14,22,14],[9,81,22,0],[11,0,27,0],[11,11,27,9,"btoa"],[11,15,27,0],[11,16,27,14,"input"],[11,21,27,0],[11,23,27,21],[12,0,28,2],[12,8,28,6,"map"],[12,11,28,2],[13,0,29,2],[13,8,29,6,"i"],[13,9,29,7],[13,12,29,10],[13,13,29,2],[14,0,30,2],[14,8,30,6,"block"],[14,13,30,11],[14,16,30,14],[14,17,30,2],[15,0,31,2],[15,8,31,6,"output"],[15,14,31,12],[15,17,31,15],[15,19,31,2],[17,0,33,2],[17,9,34,4,"block"],[17,14,34,9],[17,17,34,12],[17,18,34,4],[17,20,34,15,"i"],[17,21,34,16],[17,24,34,19],[17,25,34,4],[17,27,34,22,"map"],[17,30,34,25],[17,33,34,28,"CHARS"],[17,38,33,2],[17,40,35,4,"input"],[17,45,35,9],[17,46,35,10,"charAt"],[17,52,35,4],[17,53,35,17,"i"],[17,54,35,18],[17,57,35,21],[17,58,35,4],[17,64,35,29,"map"],[17,67,35,32],[17,70,35,35],[17,73,35,28],[17,75,35,41,"i"],[17,76,35,42],[17,79,35,45],[17,80,35,4],[17,81,33,2],[17,83,36,4,"output"],[17,89,36,10],[17,93,36,14,"map"],[17,96,36,17],[17,97,36,18,"charAt"],[17,103,36,14],[17,104,36,25],[17,109,36,31,"block"],[17,114,36,36],[17,118,36,41],[17,122,36,46,"i"],[17,123,36,47],[17,126,36,50],[17,127,36,45],[17,130,36,55],[17,131,36,14],[17,132,33,2],[17,134,37,4],[18,0,38,4],[18,10,38,10,"charCode"],[18,18,38,18],[18,21,38,21,"input"],[18,26,38,26],[18,27,38,27,"charCodeAt"],[18,37,38,21],[18,38,38,39,"i"],[18,39,38,40],[18,43,38,44],[18,47,38,48],[18,48,38,21],[18,49,38,4],[20,0,40,4],[20,10,40,8,"charCode"],[20,18,40,16],[20,21,40,19],[20,25,40,4],[20,27,40,25],[21,0,41,6],[21,14,41,12],[21,18,41,16,"Error"],[21,23,41,12],[21,24,42,8],[21,132,41,12],[21,133,41,6],[22,0,44,5],[24,0,46,4,"block"],[24,6,46,4,"block"],[24,11,46,9],[24,14,46,13,"block"],[24,19,46,18],[24,23,46,22],[24,24,46,12],[24,27,46,27,"charCode"],[24,35,46,4],[25,0,47,3],[27,0,49,2],[27,11,49,9,"output"],[27,17,49,2],[28,0,50,1],[30,0,55,0],[30,11,55,9,"atob"],[30,15,55,0],[30,16,55,14,"input"],[30,21,55,0],[30,23,55,21],[31,0,56,2],[31,8,56,6,"i"],[31,9,56,7],[31,12,56,10],[31,13,56,2],[32,0,57,2],[32,8,57,6,"bc"],[32,10,57,8],[32,13,57,11],[32,14,57,2],[33,0,58,2],[33,8,58,6,"bs"],[33,10,58,8],[33,13,58,11],[33,14,58,2],[34,0,59,2],[34,8,59,6,"buffer"],[34,14,59,2],[35,0,60,2],[35,8,60,6,"output"],[35,14,60,12],[35,17,60,15],[35,19,60,2],[36,0,62,2],[36,8,62,8,"str"],[36,11,62,11],[36,14,62,14,"input"],[36,19,62,19],[36,20,62,20,"replace"],[36,27,62,14],[36,28,62,28],[36,35,62,14],[36,37,62,37],[36,39,62,14],[36,40,62,2],[38,0,64,2],[38,8,64,6,"str"],[38,11,64,9],[38,12,64,10,"length"],[38,18,64,6],[38,21,64,19],[38,22,64,6],[38,27,64,25],[38,28,64,2],[38,30,64,28],[39,0,65,4],[39,12,65,10],[39,16,65,14,"Error"],[39,21,65,10],[39,22,66,6],[39,107,65,10],[39,108,65,4],[40,0,68,3],[42,0,70,2],[42,9,71,4,"bc"],[42,11,71,6],[42,14,71,9],[42,15,71,4],[42,17,71,12,"bs"],[42,19,71,14],[42,22,71,17],[42,23,71,4],[42,25,71,20,"i"],[42,26,71,21],[42,29,71,24],[42,30,70,2],[42,32,72,5,"buffer"],[42,38,72,11],[42,41,72,14,"str"],[42,44,72,17],[42,45,72,18,"charAt"],[42,51,72,14],[42,52,72,25,"i"],[42,53,72,26],[42,55,72,14],[42,56,70,2],[42,58,73,4],[42,59,73,5,"buffer"],[42,65,73,4],[42,70,73,17,"bs"],[42,72,73,19],[42,75,73,22,"bc"],[42,77,73,24],[42,80,73,27],[42,81,73,22],[42,84,73,31,"bs"],[42,86,73,33],[42,89,73,36],[42,91,73,31],[42,94,73,41,"buffer"],[42,100,73,22],[42,103,73,50,"buffer"],[42,109,73,16],[42,111,73,59,"bc"],[42,113,73,61],[42,118,73,66],[42,119,73,4],[42,123,74,9,"output"],[42,129,74,15],[42,133,74,19,"String"],[42,139,74,25],[42,140,74,26,"fromCharCode"],[42,152,74,19],[42,153,74,39],[42,159,74,46,"bs"],[42,161,74,48],[42,166,74,54],[42,167,74,55],[42,168,74,54],[42,171,74,59,"bc"],[42,173,74,53],[42,176,74,65],[42,177,74,48],[42,178,74,19],[42,179,73,4],[42,182,75,8],[42,183,70,2],[42,185,76,4],[43,0,77,4,"buffer"],[43,6,77,4,"buffer"],[43,12,77,10],[43,15,77,13,"CHARS"],[43,20,77,18],[43,21,77,19,"indexOf"],[43,28,77,13],[43,29,77,27,"buffer"],[43,35,77,13],[43,36,77,4],[44,0,78,3],[46,0,80,2],[46,11,80,9,"output"],[46,17,80,2],[47,0,81,1],[49,0,86,0],[49,11,86,9,"fromData"],[49,19,86,0],[49,20,86,18,"data"],[49,24,86,0],[49,26,86,24],[50,0,87,2],[50,8,87,6,"data"],[50,12,87,10],[50,24,87,22,"Blob"],[50,28,87,2],[50,30,87,28],[51,0,88,4],[51,10,88,10,"fileReader"],[51,20,88,20],[51,23,88,23],[51,27,88,27,"FileReader"],[51,37,88,23],[51,39,88,4],[53,0,89,4],[53,26,89,41],[53,89,89,4],[54,0,89,4],[54,10,89,12,"resolve"],[54,17,89,4],[54,34,89,12,"resolve"],[54,41,89,4],[55,0,89,4],[55,10,89,21,"reject"],[55,16,89,4],[55,33,89,21,"reject"],[55,39,89,4],[56,0,89,4],[56,10,89,29,"promise"],[56,17,89,4],[56,34,89,29,"promise"],[56,41,89,4],[58,0,91,4,"fileReader"],[58,6,91,4,"fileReader"],[58,16,91,14],[58,17,91,15,"readAsDataURL"],[58,30,91,4],[58,31,91,29,"data"],[58,35,91,4],[60,0,93,4,"fileReader"],[60,6,93,4,"fileReader"],[60,16,93,14],[60,17,93,15,"onloadend"],[60,26,93,4],[60,29,93,27],[60,38,93,36,"onloadend"],[60,47,93,27],[60,50,93,48],[61,0,94,6,"resolve"],[61,8,94,6,"resolve"],[61,15,94,13],[61,16,94,14],[62,0,94,16,"string"],[62,10,94,16,"string"],[62,16,94,22],[62,18,94,24,"fileReader"],[62,28,94,34],[62,29,94,35,"result"],[62,35,94,14],[63,0,94,43,"format"],[63,10,94,43,"format"],[63,16,94,49],[63,18,94,51],[64,0,94,14],[64,9,94,13],[64,10,94,6],[65,0,95,5],[65,7,93,4],[67,0,97,4,"fileReader"],[67,6,97,4,"fileReader"],[67,16,97,14],[67,17,97,15,"onerror"],[67,24,97,4],[67,27,97,25],[67,36,97,34,"onerror"],[67,43,97,25],[67,44,97,42,"event"],[67,49,97,25],[67,51,97,49],[68,0,98,6,"fileReader"],[68,8,98,6,"fileReader"],[68,18,98,16],[68,19,98,17,"abort"],[68,24,98,6],[69,0,99,6,"reject"],[69,8,99,6,"reject"],[69,14,99,12],[69,15,99,13,"event"],[69,20,99,12],[69,21,99,6],[70,0,100,5],[70,7,97,4],[72,0,102,4],[72,13,102,11,"promise"],[72,20,102,4],[73,0,103,3],[75,0,105,2],[75,8,105,6,"data"],[75,12,105,10],[75,24,105,22,"ArrayBuffer"],[75,35,105,6],[75,39,105,37,"data"],[75,43,105,41],[75,55,105,53,"Uint8Array"],[75,65,105,2],[75,67,105,65],[76,0,106,4],[76,13,106,11,"Promise"],[76,20,106,18],[76,21,106,19,"resolve"],[76,28,106,11],[76,29,106,27],[77,0,107,6,"string"],[77,8,107,6,"string"],[77,14,107,12],[77,16,107,14],[77,43,107,29,"data"],[77,47,107,14],[77,48,106,27],[78,0,108,6,"format"],[78,8,108,6,"format"],[78,14,108,12],[78,16,108,14],[79,0,106,27],[79,7,106,11],[79,8,106,4],[80,0,110,3],[82,0,112,2],[82,10,112,8],[82,14,112,12,"Error"],[82,19,112,8],[82,20,112,18],[82,77,112,8],[82,78,112,2],[83,0,113,1],[85,17,115,15],[86,0,116,2,"btoa"],[86,4,116,2,"btoa"],[86,8,116,6],[86,10,116,2,"btoa"],[86,14,115,15],[87,0,117,2,"atob"],[87,4,117,2,"atob"],[87,8,117,6],[87,10,117,2,"atob"],[87,14,115,15],[88,0,118,2,"fromData"],[88,4,118,2,"fromData"],[88,12,118,10],[88,14,118,2,"fromData"],[89,0,115,15],[89,3]],"functionMap":{"names":["<global>","btoa","atob","fromData","onloadend","onerror"],"mappings":"AAA;AC0B;CDuB;AEK;CF0B;AGK;2BCO;KDE;yBEE;KFG;CHa"}},"type":"js/module"}]}