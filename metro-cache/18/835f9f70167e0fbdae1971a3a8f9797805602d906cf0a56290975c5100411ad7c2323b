{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.INVALID_PATH_REGEX = exports.INVALID_KEY_REGEX = void 0;\n  exports.isValidKey = isValidKey;\n  exports.isValidPath = isValidPath;\n  exports.pathChild = pathChild;\n  exports.pathIsEmpty = pathIsEmpty;\n  exports.pathLastComponent = pathLastComponent;\n  exports.pathParent = pathParent;\n  exports.pathPieces = pathPieces;\n  exports.pathToUrlEncodedString = pathToUrlEncodedString;\n  exports.toFilePath = toFilePath;\n\n  function pathParent(path) {\n    if (path.length === 0) {\n      return null;\n    }\n\n    var index = path.lastIndexOf('/');\n\n    if (index <= 0) {\n      return null;\n    }\n\n    return path.slice(0, index);\n  }\n\n  function pathChild(path, childPath) {\n    var canonicalChildPath = pathPieces(childPath).join('/');\n\n    if (path.length === 0) {\n      return canonicalChildPath;\n    }\n\n    return path + \"/\" + canonicalChildPath;\n  }\n\n  function pathLastComponent(path) {\n    var index = path.lastIndexOf('/', path.length - 2);\n\n    if (index === -1) {\n      return path;\n    }\n\n    return path.slice(index + 1);\n  }\n\n  function pathPieces(path) {\n    return path.split('/').filter(function ($) {\n      return $.length > 0;\n    });\n  }\n\n  function pathIsEmpty(path) {\n    return !pathPieces(path).length;\n  }\n\n  function pathToUrlEncodedString(path) {\n    var pieces = pathPieces(path);\n    var pathString = '';\n\n    for (var i = 0; i < pieces.length; i++) {\n      pathString += \"/\" + encodeURIComponent(String(pieces[i]));\n    }\n\n    return pathString || '/';\n  }\n\n  var INVALID_PATH_REGEX = /[[\\].#$\\u0000-\\u001F\\u007F]/;\n  exports.INVALID_PATH_REGEX = INVALID_PATH_REGEX;\n\n  function isValidPath(path) {\n    return typeof path === 'string' && path.length !== 0 && !INVALID_PATH_REGEX.test(path);\n  }\n\n  var INVALID_KEY_REGEX = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n  exports.INVALID_KEY_REGEX = INVALID_KEY_REGEX;\n\n  function isValidKey(key) {\n    return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX.test(path);\n  }\n\n  function toFilePath(path) {\n    var _filePath = path.replace('file://', '');\n\n    if (_filePath.includes('%')) {\n      _filePath = decodeURIComponent(_filePath);\n    }\n\n    return _filePath;\n  }\n});","lineCount":94,"map":[[16,0,21,7],[16,11,21,16,"pathParent"],[16,21,21,7],[16,22,21,27,"path"],[16,26,21,7],[16,28,21,33],[17,0,22,2],[17,8,22,6,"path"],[17,12,22,10],[17,13,22,11,"length"],[17,19,22,6],[17,24,22,22],[17,25,22,2],[17,27,22,25],[18,0,23,4],[18,13,23,11],[18,17,23,4],[19,0,24,3],[21,0,26,2],[21,8,26,8,"index"],[21,13,26,13],[21,16,26,16,"path"],[21,20,26,20],[21,21,26,21,"lastIndexOf"],[21,32,26,16],[21,33,26,33],[21,36,26,16],[21,37,26,2],[23,0,27,2],[23,8,27,6,"index"],[23,13,27,11],[23,17,27,15],[23,18,27,2],[23,20,27,18],[24,0,28,4],[24,13,28,11],[24,17,28,4],[25,0,29,3],[27,0,31,2],[27,11,31,9,"path"],[27,15,31,13],[27,16,31,14,"slice"],[27,21,31,9],[27,22,31,20],[27,23,31,9],[27,25,31,23,"index"],[27,30,31,9],[27,31,31,2],[28,0,32,1],[30,0,37,7],[30,11,37,16,"pathChild"],[30,20,37,7],[30,21,37,26,"path"],[30,25,37,7],[30,27,37,32,"childPath"],[30,36,37,7],[30,38,37,43],[31,0,38,2],[31,8,38,8,"canonicalChildPath"],[31,26,38,26],[31,29,38,29,"pathPieces"],[31,39,38,39],[31,40,38,40,"childPath"],[31,49,38,39],[31,50,38,29],[31,51,38,51,"join"],[31,55,38,29],[31,56,38,56],[31,59,38,29],[31,60,38,2],[33,0,40,2],[33,8,40,6,"path"],[33,12,40,10],[33,13,40,11,"length"],[33,19,40,6],[33,24,40,22],[33,25,40,2],[33,27,40,25],[34,0,41,4],[34,13,41,11,"canonicalChildPath"],[34,31,41,4],[35,0,42,3],[37,0,44,2],[37,11,44,12,"path"],[37,15,44,2],[37,24,44,20,"canonicalChildPath"],[37,42,44,2],[38,0,45,1],[40,0,50,7],[40,11,50,16,"pathLastComponent"],[40,28,50,7],[40,29,50,34,"path"],[40,33,50,7],[40,35,50,40],[41,0,51,2],[41,8,51,8,"index"],[41,13,51,13],[41,16,51,16,"path"],[41,20,51,20],[41,21,51,21,"lastIndexOf"],[41,32,51,16],[41,33,51,33],[41,36,51,16],[41,38,51,38,"path"],[41,42,51,42],[41,43,51,43,"length"],[41,49,51,38],[41,52,51,52],[41,53,51,16],[41,54,51,2],[43,0,52,2],[43,8,52,6,"index"],[43,13,52,11],[43,18,52,16],[43,19,52,17],[43,20,52,2],[43,22,52,20],[44,0,53,4],[44,13,53,11,"path"],[44,17,53,4],[45,0,54,3],[47,0,56,2],[47,11,56,9,"path"],[47,15,56,13],[47,16,56,14,"slice"],[47,21,56,9],[47,22,56,20,"index"],[47,27,56,25],[47,30,56,28],[47,31,56,9],[47,32,56,2],[48,0,57,1],[50,0,64,7],[50,11,64,16,"pathPieces"],[50,21,64,7],[50,22,64,27,"path"],[50,26,64,7],[50,28,64,33],[51,0,65,2],[51,11,65,9,"path"],[51,15,65,13],[51,16,65,14,"split"],[51,21,65,9],[51,22,65,20],[51,25,65,9],[51,27,65,25,"filter"],[51,33,65,9],[51,34,65,32],[51,44,65,32,"$"],[51,45,65,33],[52,0,65,33],[52,13,65,37,"$"],[52,14,65,38],[52,15,65,39,"length"],[52,21,65,37],[52,24,65,48],[52,25,65,33],[53,0,65,33],[53,5,65,9],[53,6,65,2],[54,0,66,1],[56,0,73,7],[56,11,73,16,"pathIsEmpty"],[56,22,73,7],[56,23,73,28,"path"],[56,27,73,7],[56,29,73,34],[57,0,74,2],[57,11,74,9],[57,12,74,10,"pathPieces"],[57,22,74,20],[57,23,74,21,"path"],[57,27,74,20],[57,28,74,10],[57,29,74,27,"length"],[57,35,74,2],[58,0,75,1],[60,0,82,7],[60,11,82,16,"pathToUrlEncodedString"],[60,33,82,7],[60,34,82,39,"path"],[60,38,82,7],[60,40,82,45],[61,0,83,2],[61,8,83,8,"pieces"],[61,14,83,14],[61,17,83,17,"pathPieces"],[61,27,83,27],[61,28,83,28,"path"],[61,32,83,27],[61,33,83,2],[62,0,84,2],[62,8,84,6,"pathString"],[62,18,84,16],[62,21,84,19],[62,23,84,2],[64,0,85,2],[64,9,85,7],[64,13,85,11,"i"],[64,14,85,12],[64,17,85,15],[64,18,85,2],[64,20,85,18,"i"],[64,21,85,19],[64,24,85,22,"pieces"],[64,30,85,28],[64,31,85,29,"length"],[64,37,85,2],[64,39,85,37,"i"],[64,40,85,38],[64,42,85,2],[64,44,85,42],[65,0,86,4,"pathString"],[65,6,86,4,"pathString"],[65,16,86,14],[65,26,86,22,"encodeURIComponent"],[65,44,86,40],[65,45,86,41,"String"],[65,51,86,47],[65,52,86,48,"pieces"],[65,58,86,54],[65,59,86,55,"i"],[65,60,86,54],[65,61,86,47],[65,62,86,40],[65,63,86,4],[66,0,87,3],[68,0,88,2],[68,11,88,9,"pathString"],[68,21,88,19],[68,25,88,23],[68,28,88,2],[69,0,89,1],[71,0,92,7],[71,6,92,13,"INVALID_PATH_REGEX"],[71,24,92,31],[71,27,92,34],[71,56,92,7],[74,0,99,7],[74,11,99,16,"isValidPath"],[74,22,99,7],[74,23,99,28,"path"],[74,27,99,7],[74,29,99,34],[75,0,100,2],[75,11,100,9],[75,18,100,16,"path"],[75,22,100,9],[75,27,100,25],[75,35,100,9],[75,39,100,37,"path"],[75,43,100,41],[75,44,100,42,"length"],[75,50,100,37],[75,55,100,53],[75,56,100,9],[75,60,100,58],[75,61,100,59,"INVALID_PATH_REGEX"],[75,79,100,77],[75,80,100,78,"test"],[75,84,100,59],[75,85,100,83,"path"],[75,89,100,59],[75,90,100,2],[76,0,101,1],[78,0,104,7],[78,6,104,13,"INVALID_KEY_REGEX"],[78,23,104,30],[78,26,104,33],[78,58,104,7],[81,0,111,7],[81,11,111,16,"isValidKey"],[81,21,111,7],[81,22,111,27,"key"],[81,25,111,7],[81,27,111,32],[82,0,112,2],[82,11,112,9],[82,18,112,16,"key"],[82,21,112,9],[82,26,112,24],[82,34,112,9],[82,38,112,36,"key"],[82,41,112,39],[82,42,112,40,"length"],[82,48,112,36],[82,53,112,51],[82,54,112,9],[82,58,112,56],[82,59,112,57,"INVALID_KEY_REGEX"],[82,76,112,74],[82,77,112,75,"test"],[82,81,112,57],[82,82,112,80,"path"],[82,86,112,57],[82,87,112,2],[83,0,113,1],[85,0,120,7],[85,11,120,16,"toFilePath"],[85,21,120,7],[85,22,120,27,"path"],[85,26,120,7],[85,28,120,33],[86,0,121,2],[86,8,121,6,"_filePath"],[86,17,121,15],[86,20,121,18,"path"],[86,24,121,22],[86,25,121,23,"replace"],[86,32,121,18],[86,33,121,31],[86,42,121,18],[86,44,121,42],[86,46,121,18],[86,47,121,2],[88,0,122,2],[88,8,122,6,"_filePath"],[88,17,122,15],[88,18,122,16,"includes"],[88,26,122,6],[88,27,122,25],[88,30,122,6],[88,31,122,2],[88,33,122,31],[89,0,123,4,"_filePath"],[89,6,123,4,"_filePath"],[89,15,123,13],[89,18,123,16,"decodeURIComponent"],[89,36,123,34],[89,37,123,35,"_filePath"],[89,46,123,34],[89,47,123,4],[90,0,124,3],[92,0,125,2],[92,11,125,9,"_filePath"],[92,20,125,2],[93,0,126,1]],"functionMap":{"names":["<global>","pathParent","pathChild","pathLastComponent","pathPieces","split.filter$argument_0","pathIsEmpty","pathToUrlEncodedString","isValidPath","isValidKey","toFilePath"],"mappings":"AAA;OCoB;CDW;OEK;CFQ;OGK;CHO;OIO;gCCC,iBD;CJC;OMO;CNE;OOO;CPO;OQU;CRE;OSU;CTE;OUO;CVM"}},"type":"js/module"}]}