{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":1,"column":54}}]}},{"name":"escape-string-regexp","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":1,"column":54}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = extractPathFromURL;\n\n  var _escapeStringRegexp = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"escape-string-regexp\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function extractPathFromURL(prefixes, url) {\n    for (var _iterator = _createForOfIteratorHelperLoose(prefixes), _step; !(_step = _iterator()).done;) {\n      var _prefix$match$, _prefix$match;\n\n      var prefix = _step.value;\n      var protocol = (_prefix$match$ = (_prefix$match = prefix.match(/^[^:]+:/)) == null ? void 0 : _prefix$match[0]) != null ? _prefix$match$ : '';\n      var host = prefix.replace(new RegExp(\"^\" + (0, _escapeStringRegexp.default)(protocol)), '').replace(/\\/+/g, '/').replace(/^\\//, '');\n      var prefixRegex = new RegExp(\"^\" + (0, _escapeStringRegexp.default)(protocol) + \"(/)*\" + host.split('.').map(function (it) {\n        return it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it);\n      }).join('\\\\.'));\n      var normalizedURL = url.replace(/\\/+/g, '/');\n\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n\n    return undefined;\n  }\n});","lineCount":34,"map":[[7,0,1,0],[15,0,3,15],[15,11,3,24,"extractPathFromURL"],[15,29,3,15],[15,30,3,43,"prefixes"],[15,38,3,15],[15,40,3,63,"url"],[15,43,3,15],[15,45,3,76],[16,0,4,2],[16,57,4,23,"prefixes"],[16,65,4,2],[16,105,4,33],[17,0,4,33],[19,0,4,33],[19,10,4,13,"prefix"],[19,16,4,33],[20,0,5,4],[20,10,5,10,"protocol"],[20,18,5,18],[20,56,5,21,"prefix"],[20,62,5,27],[20,63,5,28,"match"],[20,68,5,21],[20,69,5,34],[20,78,5,21],[20,79,5,18],[20,100,5,21],[20,114,5,47],[20,115,5,21],[20,116,5,18],[20,145,5,53],[20,147,5,4],[21,0,6,4],[21,10,6,10,"host"],[21,14,6,14],[21,17,6,17,"prefix"],[21,23,6,23],[21,24,7,7,"replace"],[21,31,6,17],[21,32,7,15],[21,36,7,19,"RegExp"],[21,42,7,15],[21,49,7,30],[21,82,7,49,"protocol"],[21,90,7,30],[21,91,7,15],[21,92,6,17],[21,94,7,63],[21,96,6,17],[21,98,8,7,"replace"],[21,105,6,17],[21,106,8,15],[21,112,6,17],[21,114,8,23],[21,117,6,17],[21,119,9,7,"replace"],[21,126,6,17],[21,127,9,15],[21,132,6,17],[21,134,9,22],[21,136,6,17],[21,137,6,4],[22,0,11,4],[22,10,11,10,"prefixRegex"],[22,21,11,21],[22,24,11,24],[22,28,11,28,"RegExp"],[22,34,11,24],[22,41,12,10],[22,74,12,29,"protocol"],[22,82,12,10],[22,83,11,24],[22,95,12,45,"host"],[22,99,12,49],[22,100,13,9,"split"],[22,105,12,45],[22,106,13,15],[22,109,12,45],[22,111,14,9,"map"],[22,114,12,45],[22,115,14,13],[22,125,14,14,"it"],[22,127,14,13],[23,0,14,13],[23,15,14,22,"it"],[23,17,14,24],[23,22,14,29],[23,25,14,22],[23,28,14,35],[23,35,14,22],[23,38,14,45],[23,71,14,64,"it"],[23,73,14,45],[23,74,14,13],[24,0,14,13],[24,7,12,45],[24,9,15,9,"join"],[24,13,12,45],[24,14,15,14],[24,19,12,45],[24,20,11,24],[24,21,11,4],[25,0,18,4],[25,10,18,10,"normalizedURL"],[25,23,18,23],[25,26,18,26,"url"],[25,29,18,29],[25,30,18,30,"replace"],[25,37,18,26],[25,38,18,38],[25,44,18,26],[25,46,18,46],[25,49,18,26],[25,50,18,4],[27,0,20,4],[27,10,20,8,"prefixRegex"],[27,21,20,19],[27,22,20,20,"test"],[27,26,20,8],[27,27,20,25,"normalizedURL"],[27,40,20,8],[27,41,20,4],[27,43,20,41],[28,0,21,6],[28,15,21,13,"normalizedURL"],[28,28,21,26],[28,29,21,27,"replace"],[28,36,21,13],[28,37,21,35,"prefixRegex"],[28,48,21,13],[28,50,21,48],[28,52,21,13],[28,53,21,6],[29,0,22,5],[30,0,23,3],[32,0,25,2],[32,11,25,9,"undefined"],[32,20,25,2],[33,0,26,1]],"functionMap":{"names":["<global>","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;eCE;aCW,uDD;CDY"}},"type":"js/module"}]}