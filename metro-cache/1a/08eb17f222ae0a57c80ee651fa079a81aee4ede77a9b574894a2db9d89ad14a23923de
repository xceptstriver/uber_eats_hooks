{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":0},"end":{"line":13,"column":34}}]}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":0},"end":{"line":13,"column":34}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;\n  exports.default = void 0;\n\n  var _invariant = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"invariant\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function createStringifySafeWithLimits(limits) {\n    var _limits$maxDepth = limits.maxDepth,\n        maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,\n        _limits$maxStringLimi = limits.maxStringLimit,\n        maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,\n        _limits$maxArrayLimit = limits.maxArrayLimit,\n        maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,\n        _limits$maxObjectKeys = limits.maxObjectKeysLimit,\n        maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;\n    var stack = [];\n\n    function replacer(key, value) {\n      while (stack.length && this !== stack[0]) {\n        stack.shift();\n      }\n\n      if (typeof value === 'string') {\n        var truncatedString = '...(truncated)...';\n\n        if (value.length > maxStringLimit + truncatedString.length) {\n          return value.substring(0, maxStringLimit) + truncatedString;\n        }\n\n        return value;\n      }\n\n      if (typeof value !== 'object' || value === null) {\n        return value;\n      }\n\n      var retval = value;\n\n      if (Array.isArray(value)) {\n        if (stack.length >= maxDepth) {\n          retval = \"[ ... array with \" + value.length + \" values ... ]\";\n        } else if (value.length > maxArrayLimit) {\n          retval = value.slice(0, maxArrayLimit).concat([\"... extra \" + (value.length - maxArrayLimit) + \" values truncated ...\"]);\n        }\n      } else {\n        (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');\n        var keys = Object.keys(value);\n\n        if (stack.length >= maxDepth) {\n          retval = \"{ ... object with \" + keys.length + \" keys ... }\";\n        } else if (keys.length > maxObjectKeysLimit) {\n          retval = {};\n\n          for (var _iterator = _createForOfIteratorHelperLoose(keys.slice(0, maxObjectKeysLimit)), _step; !(_step = _iterator()).done;) {\n            var k = _step.value;\n            retval[k] = value[k];\n          }\n\n          var truncatedKey = '...(truncated keys)...';\n          retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n        }\n      }\n\n      stack.unshift(retval);\n      return retval;\n    }\n\n    return function stringifySafe(arg) {\n      if (arg === undefined) {\n        return 'undefined';\n      } else if (arg === null) {\n        return 'null';\n      } else if (typeof arg === 'function') {\n        try {\n          return arg.toString();\n        } catch (e) {\n          return '[function unknown]';\n        }\n      } else if (arg instanceof Error) {\n        return arg.name + ': ' + arg.message;\n      } else {\n        try {\n          var ret = JSON.stringify(arg, replacer);\n\n          if (ret === undefined) {\n            return '[\"' + typeof arg + '\" failed to stringify]';\n          }\n\n          return ret;\n        } catch (e) {\n          if (typeof arg.toString === 'function') {\n            try {\n              return arg.toString();\n            } catch (E) {}\n          }\n        }\n      }\n\n      return '[\"' + typeof arg + '\" failed to stringify]';\n    };\n  }\n\n  var stringifySafe = createStringifySafeWithLimits({\n    maxDepth: 10,\n    maxStringLimit: 100,\n    maxArrayLimit: 50,\n    maxObjectKeysLimit: 50\n  });\n  var _default = stringifySafe;\n  exports.default = _default;\n});","lineCount":122,"map":[[2,0,11,0],[10,0,13,0],[18,0,19,7],[18,11,19,16,"createStringifySafeWithLimits"],[18,40,19,7],[18,41,19,46,"limits"],[18,47,19,7],[18,49,24,21],[19,0,25,2],[19,27,30,6,"limits"],[19,33,25,2],[19,34,26,4,"maxDepth"],[19,42,25,2],[20,0,25,2],[20,8,26,4,"maxDepth"],[20,16,25,2],[20,49,26,15,"Number"],[20,55,26,21],[20,56,26,22,"POSITIVE_INFINITY"],[20,73,25,2],[21,0,25,2],[21,32,30,6,"limits"],[21,38,25,2],[21,39,27,4,"maxStringLimit"],[21,53,25,2],[22,0,25,2],[22,8,27,4,"maxStringLimit"],[22,22,25,2],[22,60,27,21,"Number"],[22,66,27,27],[22,67,27,28,"POSITIVE_INFINITY"],[22,84,25,2],[23,0,25,2],[23,32,30,6,"limits"],[23,38,25,2],[23,39,28,4,"maxArrayLimit"],[23,52,25,2],[24,0,25,2],[24,8,28,4,"maxArrayLimit"],[24,21,25,2],[24,59,28,20,"Number"],[24,65,28,26],[24,66,28,27,"POSITIVE_INFINITY"],[24,83,25,2],[25,0,25,2],[25,32,30,6,"limits"],[25,38,25,2],[25,39,29,4,"maxObjectKeysLimit"],[25,57,25,2],[26,0,25,2],[26,8,29,4,"maxObjectKeysLimit"],[26,26,25,2],[26,64,29,25,"Number"],[26,70,29,31],[26,71,29,32,"POSITIVE_INFINITY"],[26,88,25,2],[27,0,31,2],[27,8,31,8,"stack"],[27,13,31,13],[27,16,31,16],[27,18,31,2],[29,0,32,2],[29,13,32,11,"replacer"],[29,21,32,2],[29,22,32,20,"key"],[29,25,32,2],[29,27,32,33,"value"],[29,32,32,2],[29,34,32,54],[30,0,33,4],[30,13,33,11,"stack"],[30,18,33,16],[30,19,33,17,"length"],[30,25,33,11],[30,29,33,27],[30,38,33,36,"stack"],[30,43,33,41],[30,44,33,42],[30,45,33,41],[30,46,33,4],[30,48,33,46],[31,0,34,6,"stack"],[31,8,34,6,"stack"],[31,13,34,11],[31,14,34,12,"shift"],[31,19,34,6],[32,0,35,5],[34,0,37,4],[34,10,37,8],[34,17,37,15,"value"],[34,22,37,8],[34,27,37,25],[34,35,37,4],[34,37,37,35],[35,0,38,6],[35,12,38,12,"truncatedString"],[35,27,38,27],[35,30,38,30],[35,49,38,6],[37,0,39,6],[37,12,39,10,"value"],[37,17,39,15],[37,18,39,16,"length"],[37,24,39,10],[37,27,39,25,"maxStringLimit"],[37,41,39,39],[37,44,39,42,"truncatedString"],[37,59,39,57],[37,60,39,58,"length"],[37,66,39,6],[37,68,39,66],[38,0,40,8],[38,17,40,15,"value"],[38,22,40,20],[38,23,40,21,"substring"],[38,32,40,15],[38,33,40,31],[38,34,40,15],[38,36,40,34,"maxStringLimit"],[38,50,40,15],[38,54,40,52,"truncatedString"],[38,69,40,8],[39,0,41,7],[41,0,42,6],[41,15,42,13,"value"],[41,20,42,6],[42,0,43,5],[44,0,44,4],[44,10,44,8],[44,17,44,15,"value"],[44,22,44,8],[44,27,44,25],[44,35,44,8],[44,39,44,37,"value"],[44,44,44,42],[44,49,44,47],[44,53,44,4],[44,55,44,53],[45,0,45,6],[45,15,45,13,"value"],[45,20,45,6],[46,0,46,5],[48,0,48,4],[48,10,48,8,"retval"],[48,16,48,14],[48,19,48,17,"value"],[48,24,48,4],[50,0,49,4],[50,10,49,8,"Array"],[50,15,49,13],[50,16,49,14,"isArray"],[50,23,49,8],[50,24,49,22,"value"],[50,29,49,8],[50,30,49,4],[50,32,49,30],[51,0,50,6],[51,12,50,10,"stack"],[51,17,50,15],[51,18,50,16,"length"],[51,24,50,10],[51,28,50,26,"maxDepth"],[51,36,50,6],[51,38,50,36],[52,0,51,8,"retval"],[52,10,51,8,"retval"],[52,16,51,14],[52,41,51,37,"value"],[52,46,51,42],[52,47,51,43,"length"],[52,53,51,14],[52,71,51,8],[53,0,52,7],[53,9,50,6],[53,15,52,13],[53,19,52,17,"value"],[53,24,52,22],[53,25,52,23,"length"],[53,31,52,17],[53,34,52,32,"maxArrayLimit"],[53,47,52,13],[53,49,52,47],[54,0,53,8,"retval"],[54,10,53,8,"retval"],[54,16,53,14],[54,19,53,17,"value"],[54,24,53,22],[54,25,54,11,"slice"],[54,30,53,17],[54,31,54,17],[54,32,53,17],[54,34,54,20,"maxArrayLimit"],[54,47,53,17],[54,49,55,11,"concat"],[54,55,53,17],[54,56,55,18],[54,73,56,25,"value"],[54,78,56,30],[54,79,56,31,"length"],[54,85,56,25],[54,88,56,40,"maxArrayLimit"],[54,101,55,18],[54,129,53,17],[54,130,53,8],[55,0,58,7],[56,0,59,5],[56,7,49,4],[56,13,59,11],[57,0,61,6],[57,32,61,16],[57,39,61,23,"value"],[57,44,61,16],[57,49,61,33],[57,57,61,6],[57,59,61,43],[57,91,61,6],[58,0,62,6],[58,12,62,10,"keys"],[58,16,62,14],[58,19,62,17,"Object"],[58,25,62,23],[58,26,62,24,"keys"],[58,30,62,17],[58,31,62,29,"value"],[58,36,62,17],[58,37,62,6],[60,0,63,6],[60,12,63,10,"stack"],[60,17,63,15],[60,18,63,16,"length"],[60,24,63,10],[60,28,63,26,"maxDepth"],[60,36,63,6],[60,38,63,36],[61,0,64,8,"retval"],[61,10,64,8,"retval"],[61,16,64,14],[61,42,64,38,"keys"],[61,46,64,42],[61,47,64,43,"length"],[61,53,64,14],[61,69,64,8],[62,0,65,7],[62,9,63,6],[62,15,65,13],[62,19,65,17,"keys"],[62,23,65,21],[62,24,65,22,"length"],[62,30,65,17],[62,33,65,31,"maxObjectKeysLimit"],[62,51,65,13],[62,53,65,51],[63,0,67,8,"retval"],[63,10,67,8,"retval"],[63,16,67,14],[63,19,67,17],[63,21,67,8],[65,0,68,8],[65,63,68,22,"keys"],[65,67,68,26],[65,68,68,27,"slice"],[65,73,68,22],[65,74,68,33],[65,75,68,22],[65,77,68,36,"maxObjectKeysLimit"],[65,95,68,22],[65,96,68,8],[65,136,68,57],[66,0,68,57],[66,16,68,17,"k"],[66,17,68,57],[67,0,69,10,"retval"],[67,12,69,10,"retval"],[67,18,69,16],[67,19,69,17,"k"],[67,20,69,16],[67,21,69,10],[67,24,69,22,"value"],[67,29,69,27],[67,30,69,28,"k"],[67,31,69,27],[67,32,69,10],[68,0,70,9],[70,0,71,8],[70,14,71,14,"truncatedKey"],[70,26,71,26],[70,29,71,29],[70,53,71,8],[71,0,72,8,"retval"],[71,10,72,8,"retval"],[71,16,72,14],[71,17,72,15,"truncatedKey"],[71,29,72,14],[71,30,72,8],[71,33,72,31,"keys"],[71,37,72,35],[71,38,72,36,"length"],[71,44,72,31],[71,47,72,45,"maxObjectKeysLimit"],[71,65,72,8],[72,0,73,7],[73,0,74,5],[75,0,75,4,"stack"],[75,6,75,4,"stack"],[75,11,75,9],[75,12,75,10,"unshift"],[75,19,75,4],[75,20,75,18,"retval"],[75,26,75,4],[76,0,76,4],[76,13,76,11,"retval"],[76,19,76,4],[77,0,77,3],[79,0,79,2],[79,11,79,9],[79,20,79,18,"stringifySafe"],[79,33,79,9],[79,34,79,32,"arg"],[79,37,79,9],[79,39,79,52],[80,0,80,4],[80,10,80,8,"arg"],[80,13,80,11],[80,18,80,16,"undefined"],[80,27,80,4],[80,29,80,27],[81,0,81,6],[81,15,81,13],[81,26,81,6],[82,0,82,5],[82,7,80,4],[82,13,82,11],[82,17,82,15,"arg"],[82,20,82,18],[82,25,82,23],[82,29,82,11],[82,31,82,29],[83,0,83,6],[83,15,83,13],[83,21,83,6],[84,0,84,5],[84,7,82,11],[84,13,84,11],[84,17,84,15],[84,24,84,22,"arg"],[84,27,84,15],[84,32,84,30],[84,42,84,11],[84,44,84,42],[85,0,85,6],[85,12,85,10],[86,0,86,8],[86,17,86,15,"arg"],[86,20,86,18],[86,21,86,19,"toString"],[86,29,86,15],[86,31,86,8],[87,0,87,7],[87,9,85,6],[87,10,87,8],[87,17,87,15,"e"],[87,18,87,8],[87,20,87,18],[88,0,88,8],[88,17,88,15],[88,37,88,8],[89,0,89,7],[90,0,90,5],[90,7,84,11],[90,13,90,11],[90,17,90,15,"arg"],[90,20,90,18],[90,32,90,30,"Error"],[90,37,90,11],[90,39,90,37],[91,0,91,6],[91,15,91,13,"arg"],[91,18,91,16],[91,19,91,17,"name"],[91,23,91,13],[91,26,91,24],[91,30,91,13],[91,33,91,31,"arg"],[91,36,91,34],[91,37,91,35,"message"],[91,44,91,6],[92,0,92,5],[92,7,90,11],[92,13,92,11],[93,0,95,6],[93,12,95,10],[94,0,96,8],[94,14,96,14,"ret"],[94,17,96,17],[94,20,96,20,"JSON"],[94,24,96,24],[94,25,96,25,"stringify"],[94,34,96,20],[94,35,96,35,"arg"],[94,38,96,20],[94,40,96,40,"replacer"],[94,48,96,20],[94,49,96,8],[96,0,97,8],[96,14,97,12,"ret"],[96,17,97,15],[96,22,97,20,"undefined"],[96,31,97,8],[96,33,97,31],[97,0,98,10],[97,19,98,17],[97,26,98,24],[97,33,98,31,"arg"],[97,36,98,17],[97,39,98,37],[97,63,98,10],[98,0,99,9],[100,0,100,8],[100,17,100,15,"ret"],[100,20,100,8],[101,0,101,7],[101,9,95,6],[101,10,101,8],[101,17,101,15,"e"],[101,18,101,8],[101,20,101,18],[102,0,102,8],[102,14,102,12],[102,21,102,19,"arg"],[102,24,102,22],[102,25,102,23,"toString"],[102,33,102,12],[102,38,102,36],[102,48,102,8],[102,50,102,48],[103,0,103,10],[103,16,103,14],[104,0,105,12],[104,21,105,19,"arg"],[104,24,105,22],[104,25,105,23,"toString"],[104,33,105,19],[104,35,105,12],[105,0,106,11],[105,13,103,10],[105,14,106,12],[105,21,106,19,"E"],[105,22,106,12],[105,24,106,22],[105,25,106,24],[106,0,107,9],[107,0,108,7],[108,0,109,5],[110,0,110,4],[110,13,110,11],[110,20,110,18],[110,27,110,25,"arg"],[110,30,110,11],[110,33,110,31],[110,57,110,4],[111,0,111,3],[111,5,79,2],[112,0,112,1],[114,0,114,0],[114,6,114,6,"stringifySafe"],[114,19,114,36],[114,22,114,39,"createStringifySafeWithLimits"],[114,51,114,68],[114,52,114,69],[115,0,115,2,"maxDepth"],[115,4,115,2,"maxDepth"],[115,12,115,10],[115,14,115,12],[115,16,114,69],[116,0,116,2,"maxStringLimit"],[116,4,116,2,"maxStringLimit"],[116,18,116,16],[116,20,116,18],[116,23,114,69],[117,0,117,2,"maxArrayLimit"],[117,4,117,2,"maxArrayLimit"],[117,17,117,15],[117,19,117,17],[117,21,114,69],[118,0,118,2,"maxObjectKeysLimit"],[118,4,118,2,"maxObjectKeysLimit"],[118,22,118,20],[118,24,118,22],[119,0,114,69],[119,3,114,68],[119,4,114,0],[120,17,121,15,"stringifySafe"],[120,30]],"functionMap":{"names":["<global>","createStringifySafeWithLimits","replacer","stringifySafe"],"mappings":"AAA;OCkB;ECa;GD6C;SEE;GFgC;CDC"}},"type":"js/module"}]}