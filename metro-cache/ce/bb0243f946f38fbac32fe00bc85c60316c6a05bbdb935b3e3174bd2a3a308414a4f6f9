{"dependencies":[{"name":"./lib/markup","data":{"asyncType":null,"locs":[{"start":{"line":71,"column":15},"end":{"line":71,"column":32}},{"start":{"line":75,"column":15},"end":{"line":75,"column":35}},{"start":{"line":83,"column":15},"end":{"line":83,"column":41}},{"start":{"line":86,"column":13},"end":{"line":86,"column":33}},{"start":{"line":88,"column":8},"end":{"line":88,"column":26}},{"start":{"line":106,"column":8},"end":{"line":106,"column":29}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.default = exports.serialize = exports.test = void 0;\n  var ELEMENT_NODE = 1;\n  var TEXT_NODE = 3;\n  var COMMENT_NODE = 8;\n  var FRAGMENT_NODE = 11;\n  var ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\n  var testNode = function testNode(val) {\n    var _val$hasAttribute;\n\n    var constructorName = val.constructor.name;\n    var nodeType = val.nodeType,\n        tagName = val.tagName;\n    var isCustomElement = typeof tagName === 'string' && tagName.includes('-') || ((_val$hasAttribute = val.hasAttribute) === null || _val$hasAttribute === void 0 ? void 0 : _val$hasAttribute.call(val, 'is'));\n    return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';\n  };\n\n  var test = function test(val) {\n    var _val$constructor;\n\n    return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode(val);\n  };\n\n  exports.test = test;\n\n  function nodeIsText(node) {\n    return node.nodeType === TEXT_NODE;\n  }\n\n  function nodeIsComment(node) {\n    return node.nodeType === COMMENT_NODE;\n  }\n\n  function nodeIsFragment(node) {\n    return node.nodeType === FRAGMENT_NODE;\n  }\n\n  var serialize = function serialize(node, config, indentation, depth, refs, printer) {\n    if (nodeIsText(node)) {\n      return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printText)(node.data, config);\n    }\n\n    if (nodeIsComment(node)) {\n      return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printComment)(node.data, config);\n    }\n\n    var type = nodeIsFragment(node) ? \"DocumentFragment\" : node.tagName.toLowerCase();\n\n    if (++depth > config.maxDepth) {\n      return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printElementAsLeaf)(type, config);\n    }\n\n    return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printElement)(type, (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(function (attr) {\n      return attr.name;\n    }).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce(function (props, attribute) {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}), config, indentation + config.indent, depth, refs, printer), (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);\n  };\n\n  exports.serialize = serialize;\n  var plugin = {\n    serialize: serialize,\n    test: test\n  };\n  var _default = plugin;\n  exports.default = _default;\n});","lineCount":74,"map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"exports"],[7,27,6,25],[7,28,6,26,"serialize"],[7,37,6,18],[7,40,6,38,"exports"],[7,47,6,45],[7,48,6,46,"test"],[7,52,6,38],[7,55,6,53],[7,60,6,58],[7,61,6,0],[8,0,16,0],[8,6,16,6,"ELEMENT_NODE"],[8,18,16,18],[8,21,16,21],[8,22,16,0],[9,0,17,0],[9,6,17,6,"TEXT_NODE"],[9,15,17,15],[9,18,17,18],[9,19,17,0],[10,0,18,0],[10,6,18,6,"COMMENT_NODE"],[10,18,18,18],[10,21,18,21],[10,22,18,0],[11,0,19,0],[11,6,19,6,"FRAGMENT_NODE"],[11,19,19,19],[11,22,19,22],[11,24,19,0],[12,0,20,0],[12,6,20,6,"ELEMENT_REGEXP"],[12,20,20,20],[12,23,20,23],[12,50,20,0],[14,0,22,0],[14,6,22,6,"testNode"],[14,14,22,14],[14,17,22,17],[14,26,22,6,"testNode"],[14,34,22,17],[14,35,22,17,"val"],[14,38,22,20],[14,40,22,24],[15,0,23,2],[15,8,23,6,"_val$hasAttribute"],[15,25,23,2],[17,0,25,2],[17,8,25,8,"constructorName"],[17,23,25,23],[17,26,25,26,"val"],[17,29,25,29],[17,30,25,30,"constructor"],[17,41,25,26],[17,42,25,42,"name"],[17,46,25,2],[18,0,26,2],[18,8,26,9,"nodeType"],[18,16,26,2],[18,19,26,30,"val"],[18,22,26,2],[18,23,26,9,"nodeType"],[18,31,26,2],[19,0,26,2],[19,8,26,19,"tagName"],[19,15,26,2],[19,18,26,30,"val"],[19,21,26,2],[19,22,26,19,"tagName"],[19,29,26,2],[20,0,27,2],[20,8,27,8,"isCustomElement"],[20,23,27,23],[20,26,28,5],[20,33,28,12,"tagName"],[20,40,28,5],[20,45,28,24],[20,53,28,5],[20,57,28,36,"tagName"],[20,64,28,43],[20,65,28,44,"includes"],[20,73,28,36],[20,74,28,53],[20,77,28,36],[20,78,28,4],[20,83,29,5],[20,84,29,6,"_val$hasAttribute"],[20,101,29,23],[20,104,29,26,"val"],[20,107,29,29],[20,108,29,30,"hasAttribute"],[20,120,29,5],[20,126,29,48],[20,130,29,5],[20,134,30,4,"_val$hasAttribute"],[20,151,30,21],[20,156,30,26],[20,161,30,31],[20,162,29,5],[20,165,31,8],[20,170,31,13],[20,171,29,5],[20,174,32,8,"_val$hasAttribute"],[20,191,32,25],[20,192,32,26,"call"],[20,196,32,8],[20,197,32,31,"val"],[20,200,32,8],[20,202,32,36],[20,206,32,8],[20,207,28,4],[20,208,27,2],[21,0,33,2],[21,11,34,5,"nodeType"],[21,19,34,13],[21,24,34,18,"ELEMENT_NODE"],[21,36,34,5],[21,41,35,7,"ELEMENT_REGEXP"],[21,55,35,21],[21,56,35,22,"test"],[21,60,35,7],[21,61,35,27,"constructorName"],[21,76,35,7],[21,81,35,47,"isCustomElement"],[21,96,34,5],[21,97,34,4],[21,101,36,5,"nodeType"],[21,109,36,13],[21,114,36,18,"TEXT_NODE"],[21,123,36,5],[21,127,36,31,"constructorName"],[21,142,36,46],[21,147,36,51],[21,153,34,4],[21,157,37,5,"nodeType"],[21,165,37,13],[21,170,37,18,"COMMENT_NODE"],[21,182,37,5],[21,186,37,34,"constructorName"],[21,201,37,49],[21,206,37,54],[21,215,34,4],[21,219,38,5,"nodeType"],[21,227,38,13],[21,232,38,18,"FRAGMENT_NODE"],[21,245,38,5],[21,249,38,35,"constructorName"],[21,264,38,50],[21,269,38,55],[21,287,33,2],[22,0,40,1],[22,3,22,0],[24,0,42,0],[24,6,42,6,"test"],[24,10,42,10],[24,13,42,13],[24,22,42,6,"test"],[24,26,42,13],[24,27,42,13,"val"],[24,30,42,16],[24,32,42,20],[25,0,43,2],[25,8,43,6,"_val$constructor"],[25,24,43,2],[27,0,45,2],[27,11,46,4],[27,12,46,5,"val"],[27,15,46,8],[27,20,46,13],[27,24,46,5],[27,28,46,21,"val"],[27,31,46,24],[27,36,46,29],[27,41,46,34],[27,42,46,5],[27,45,47,8],[27,50,47,13],[27,51,46,5],[27,54,48,8],[27,55,48,9,"_val$constructor"],[27,71,48,25],[27,74,48,28,"val"],[27,77,48,31],[27,78,48,32,"constructor"],[27,89,48,8],[27,95,48,49],[27,99,48,8],[27,103,49,8,"_val$constructor"],[27,119,49,24],[27,124,49,29],[27,129,49,34],[27,130,48,8],[27,133,50,8],[27,138,50,13],[27,139,48,8],[27,142,51,8,"_val$constructor"],[27,158,51,24],[27,159,51,25,"name"],[27,163,46,4],[27,168,51,34,"testNode"],[27,176,51,42],[27,177,51,43,"val"],[27,180,51,42],[27,181,45,2],[28,0,53,1],[28,3,42,0],[30,0,55,0,"exports"],[30,2,55,0,"exports"],[30,9,55,7],[30,10,55,8,"test"],[30,14,55,0],[30,17,55,15,"test"],[30,21,55,0],[32,0,57,0],[32,11,57,9,"nodeIsText"],[32,21,57,0],[32,22,57,20,"node"],[32,26,57,0],[32,28,57,26],[33,0,58,2],[33,11,58,9,"node"],[33,15,58,13],[33,16,58,14,"nodeType"],[33,24,58,9],[33,29,58,27,"TEXT_NODE"],[33,38,58,2],[34,0,59,1],[36,0,61,0],[36,11,61,9,"nodeIsComment"],[36,24,61,0],[36,25,61,23,"node"],[36,29,61,0],[36,31,61,29],[37,0,62,2],[37,11,62,9,"node"],[37,15,62,13],[37,16,62,14,"nodeType"],[37,24,62,9],[37,29,62,27,"COMMENT_NODE"],[37,41,62,2],[38,0,63,1],[40,0,65,0],[40,11,65,9,"nodeIsFragment"],[40,25,65,0],[40,26,65,24,"node"],[40,30,65,0],[40,32,65,30],[41,0,66,2],[41,11,66,9,"node"],[41,15,66,13],[41,16,66,14,"nodeType"],[41,24,66,9],[41,29,66,27,"FRAGMENT_NODE"],[41,42,66,2],[42,0,67,1],[44,0,69,0],[44,6,69,6,"serialize"],[44,15,69,15],[44,18,69,18],[44,27,69,6,"serialize"],[44,36,69,18],[44,37,69,19,"node"],[44,41,69,18],[44,43,69,25,"config"],[44,49,69,18],[44,51,69,33,"indentation"],[44,62,69,18],[44,64,69,46,"depth"],[44,69,69,18],[44,71,69,53,"refs"],[44,75,69,18],[44,77,69,59,"printer"],[44,84,69,18],[44,86,69,71],[45,0,70,2],[45,8,70,6,"nodeIsText"],[45,18,70,16],[45,19,70,17,"node"],[45,23,70,16],[45,24,70,2],[45,26,70,24],[46,0,71,4],[46,13,71,11],[46,14,71,12],[46,17,71,15],[46,64,71,23,"printText"],[46,73,71,11],[46,75,71,34,"node"],[46,79,71,38],[46,80,71,39,"data"],[46,84,71,11],[46,86,71,45,"config"],[46,92,71,11],[46,93,71,4],[47,0,72,3],[49,0,74,2],[49,8,74,6,"nodeIsComment"],[49,21,74,19],[49,22,74,20,"node"],[49,26,74,19],[49,27,74,2],[49,29,74,27],[50,0,75,4],[50,13,75,11],[50,14,75,12],[50,17,75,15],[50,64,75,23,"printComment"],[50,76,75,11],[50,78,75,37,"node"],[50,82,75,41],[50,83,75,42,"data"],[50,87,75,11],[50,89,75,48,"config"],[50,95,75,11],[50,96,75,4],[51,0,76,3],[53,0,78,2],[53,8,78,8,"type"],[53,12,78,12],[53,15,78,15,"nodeIsFragment"],[53,29,78,29],[53,30,78,30,"node"],[53,34,78,29],[53,35,78,15],[53,59,80,6,"node"],[53,63,80,10],[53,64,80,11,"tagName"],[53,71,80,6],[53,72,80,19,"toLowerCase"],[53,83,80,6],[53,85,78,2],[55,0,82,2],[55,8,82,6],[55,10,82,8,"depth"],[55,15,82,6],[55,18,82,16,"config"],[55,24,82,22],[55,25,82,23,"maxDepth"],[55,33,82,2],[55,35,82,33],[56,0,83,4],[56,13,83,11],[56,14,83,12],[56,17,83,15],[56,64,83,23,"printElementAsLeaf"],[56,82,83,11],[56,84,83,43,"type"],[56,88,83,11],[56,90,83,49,"config"],[56,96,83,11],[56,97,83,4],[57,0,84,3],[59,0,86,2],[59,11,86,9],[59,12,86,10],[59,15,86,13],[59,62,86,21,"printElement"],[59,74,86,9],[59,76,87,4,"type"],[59,80,86,9],[59,82,88,4],[59,83,88,5],[59,86,88,8],[59,133,88,16,"printProps"],[59,143,88,4],[59,145,89,6,"nodeIsFragment"],[59,159,89,20],[59,160,89,21,"node"],[59,164,89,20],[59,165,89,6],[59,168,90,10],[59,170,89,6],[59,173,91,10,"Array"],[59,178,91,15],[59,179,91,16,"from"],[59,183,91,10],[59,184,91,21,"node"],[59,188,91,25],[59,189,91,26,"attributes"],[59,199,91,10],[59,201,92,13,"map"],[59,204,91,10],[59,205,92,17],[59,215,92,17,"attr"],[59,219,92,21],[60,0,92,21],[60,13,92,25,"attr"],[60,17,92,29],[60,18,92,30,"name"],[60,22,92,21],[61,0,92,21],[61,5,91,10],[61,7,93,13,"sort"],[61,11,91,10],[61,13,88,4],[61,15,94,6,"nodeIsFragment"],[61,29,94,20],[61,30,94,21,"node"],[61,34,94,20],[61,35,94,6],[61,38,95,10],[61,40,94,6],[61,43,96,10,"Array"],[61,48,96,15],[61,49,96,16,"from"],[61,53,96,10],[61,54,96,21,"node"],[61,58,96,25],[61,59,96,26,"attributes"],[61,69,96,10],[61,71,96,38,"reduce"],[61,77,96,10],[61,78,96,45],[61,88,96,46,"props"],[61,93,96,45],[61,95,96,53,"attribute"],[61,104,96,45],[61,106,96,67],[62,0,97,12,"props"],[62,6,97,12,"props"],[62,11,97,17],[62,12,97,18,"attribute"],[62,21,97,27],[62,22,97,28,"name"],[62,26,97,17],[62,27,97,12],[62,30,97,36,"attribute"],[62,39,97,45],[62,40,97,46,"value"],[62,45,97,12],[63,0,98,12],[63,13,98,19,"props"],[63,18,98,12],[64,0,99,11],[64,5,96,10],[64,7,99,13],[64,9,96,10],[64,10,88,4],[64,12,100,6,"config"],[64,18,88,4],[64,20,101,6,"indentation"],[64,31,101,17],[64,34,101,20,"config"],[64,40,101,26],[64,41,101,27,"indent"],[64,47,88,4],[64,49,102,6,"depth"],[64,54,88,4],[64,56,103,6,"refs"],[64,60,88,4],[64,62,104,6,"printer"],[64,69,88,4],[64,70,86,9],[64,72,106,4],[64,73,106,5],[64,76,106,8],[64,123,106,16,"printChildren"],[64,136,106,4],[64,138,107,6,"Array"],[64,143,107,11],[64,144,107,12,"prototype"],[64,153,107,6],[64,154,107,22,"slice"],[64,159,107,6],[64,160,107,28,"call"],[64,164,107,6],[64,165,107,33,"node"],[64,169,107,37],[64,170,107,38,"childNodes"],[64,180,107,33],[64,184,107,52,"node"],[64,188,107,56],[64,189,107,57,"children"],[64,197,107,6],[64,198,106,4],[64,200,108,6,"config"],[64,206,106,4],[64,208,109,6,"indentation"],[64,219,109,17],[64,222,109,20,"config"],[64,228,109,26],[64,229,109,27,"indent"],[64,235,106,4],[64,237,110,6,"depth"],[64,242,106,4],[64,244,111,6,"refs"],[64,248,106,4],[64,250,112,6,"printer"],[64,257,106,4],[64,258,86,9],[64,260,114,4,"config"],[64,266,86,9],[64,268,115,4,"indentation"],[64,279,86,9],[64,280,86,2],[65,0,117,1],[65,3,69,0],[67,0,119,0,"exports"],[67,2,119,0,"exports"],[67,9,119,7],[67,10,119,8,"serialize"],[67,19,119,0],[67,22,119,20,"serialize"],[67,31,119,0],[68,0,120,0],[68,6,120,6,"plugin"],[68,12,120,12],[68,15,120,15],[69,0,121,2,"serialize"],[69,4,121,2,"serialize"],[69,13,121,11],[69,15,121,2,"serialize"],[69,24,120,15],[70,0,122,2,"test"],[70,4,122,2,"test"],[70,8,122,6],[70,10,122,2,"test"],[71,0,120,15],[71,3,120,0],[72,0,124,0],[72,6,124,4,"_default"],[72,14,124,12],[72,17,124,15,"plugin"],[72,23,124,0],[73,0,125,0,"exports"],[73,2,125,0,"exports"],[73,9,125,7],[73,10,125,8,"default"],[73,17,125,0],[73,20,125,18,"_default"],[73,28,125,0]],"functionMap":{"names":["<global>","testNode","test","nodeIsText","nodeIsComment","nodeIsFragment","serialize","Array.from.map$argument_0","Array.from.reduce$argument_0"],"mappings":"AAA;iBCqB;CDkB;aEE;CFW;AGI;CHE;AIE;CJE;AKE;CLE;kBME;iBCuB,iBD;6CEI;WFG;CNkB"}},"type":"js/module"}]}