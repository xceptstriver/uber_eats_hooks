{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var RE_FRAME = /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.+?):(\\d+):(\\d+)\\))$/;\n  var RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\n\n  function parseLine(line) {\n    var asFrame = line.match(RE_FRAME);\n\n    if (asFrame) {\n      return {\n        type: 'FRAME',\n        functionName: asFrame[1],\n        location: asFrame[2] === 'native' ? {\n          type: 'NATIVE'\n        } : asFrame[3] === 'address at ' ? {\n          type: 'BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'SOURCE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          column1Based: Number.parseInt(asFrame[6], 10)\n        }\n      };\n    }\n\n    var asSkipped = line.match(RE_SKIPPED);\n\n    if (asSkipped) {\n      return {\n        type: 'SKIPPED',\n        count: Number.parseInt(asSkipped[1], 10)\n      };\n    }\n  }\n\n  module.exports = function parseHermesStack(stack) {\n    var lines = stack.split(/\\n/);\n    var entries = [];\n    var lastMessageLine = -1;\n\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n\n      if (!line) {\n        continue;\n      }\n\n      var entry = parseLine(line);\n\n      if (entry) {\n        entries.push(entry);\n        continue;\n      }\n\n      lastMessageLine = i;\n      entries = [];\n    }\n\n    var message = lines.slice(0, lastMessageLine + 1).join('\\n');\n    return {\n      message: message,\n      entries: entries\n    };\n  };\n});","lineCount":69,"map":[[2,0,11,0],[4,0,61,0],[4,6,61,6,"RE_FRAME"],[4,14,61,14],[4,17,61,17],[4,88,61,0],[5,0,65,0],[5,6,65,6,"RE_SKIPPED"],[5,16,65,16],[5,19,65,19],[5,52,65,0],[7,0,67,0],[7,11,67,9,"parseLine"],[7,20,67,0],[7,21,67,19,"line"],[7,25,67,0],[7,27,67,52],[8,0,68,2],[8,8,68,8,"asFrame"],[8,15,68,15],[8,18,68,18,"line"],[8,22,68,22],[8,23,68,23,"match"],[8,28,68,18],[8,29,68,29,"RE_FRAME"],[8,37,68,18],[8,38,68,2],[10,0,69,2],[10,8,69,6,"asFrame"],[10,15,69,2],[10,17,69,15],[11,0,70,4],[11,13,70,11],[12,0,71,6,"type"],[12,8,71,6,"type"],[12,12,71,10],[12,14,71,12],[12,21,70,11],[13,0,72,6,"functionName"],[13,8,72,6,"functionName"],[13,20,72,18],[13,22,72,20,"asFrame"],[13,29,72,27],[13,30,72,28],[13,31,72,27],[13,32,70,11],[14,0,73,6,"location"],[14,8,73,6,"location"],[14,16,73,14],[14,18,74,8,"asFrame"],[14,25,74,15],[14,26,74,16],[14,27,74,15],[14,28,74,8],[14,33,74,23],[14,41,74,8],[14,44,75,12],[15,0,75,13,"type"],[15,10,75,13,"type"],[15,14,75,17],[15,16,75,19],[16,0,75,12],[16,9,74,8],[16,12,76,12,"asFrame"],[16,19,76,19],[16,20,76,20],[16,21,76,19],[16,22,76,12],[16,27,76,27],[16,40,76,12],[16,43,77,12],[17,0,78,14,"type"],[17,10,78,14,"type"],[17,14,78,18],[17,16,78,20],[17,26,77,12],[18,0,79,14,"sourceUrl"],[18,10,79,14,"sourceUrl"],[18,19,79,23],[18,21,79,25,"asFrame"],[18,28,79,32],[18,29,79,33],[18,30,79,32],[18,31,77,12],[19,0,80,14,"line1Based"],[19,10,80,14,"line1Based"],[19,20,80,24],[19,22,80,26,"Number"],[19,28,80,32],[19,29,80,33,"parseInt"],[19,37,80,26],[19,38,80,42,"asFrame"],[19,45,80,49],[19,46,80,50],[19,47,80,49],[19,48,80,26],[19,50,80,54],[19,52,80,26],[19,53,77,12],[20,0,81,14,"virtualOffset0Based"],[20,10,81,14,"virtualOffset0Based"],[20,29,81,33],[20,31,81,35,"Number"],[20,37,81,41],[20,38,81,42,"parseInt"],[20,46,81,35],[20,47,81,51,"asFrame"],[20,54,81,58],[20,55,81,59],[20,56,81,58],[20,57,81,35],[20,59,81,63],[20,61,81,35],[21,0,77,12],[21,9,76,12],[21,12,83,12],[22,0,84,14,"type"],[22,10,84,14,"type"],[22,14,84,18],[22,16,84,20],[22,24,83,12],[23,0,85,14,"sourceUrl"],[23,10,85,14,"sourceUrl"],[23,19,85,23],[23,21,85,25,"asFrame"],[23,28,85,32],[23,29,85,33],[23,30,85,32],[23,31,83,12],[24,0,86,14,"line1Based"],[24,10,86,14,"line1Based"],[24,20,86,24],[24,22,86,26,"Number"],[24,28,86,32],[24,29,86,33,"parseInt"],[24,37,86,26],[24,38,86,42,"asFrame"],[24,45,86,49],[24,46,86,50],[24,47,86,49],[24,48,86,26],[24,50,86,54],[24,52,86,26],[24,53,83,12],[25,0,87,14,"column1Based"],[25,10,87,14,"column1Based"],[25,22,87,26],[25,24,87,28,"Number"],[25,30,87,34],[25,31,87,35,"parseInt"],[25,39,87,28],[25,40,87,44,"asFrame"],[25,47,87,51],[25,48,87,52],[25,49,87,51],[25,50,87,28],[25,52,87,56],[25,54,87,28],[26,0,83,12],[27,0,70,11],[27,7,70,4],[28,0,90,3],[30,0,91,2],[30,8,91,8,"asSkipped"],[30,17,91,17],[30,20,91,20,"line"],[30,24,91,24],[30,25,91,25,"match"],[30,30,91,20],[30,31,91,31,"RE_SKIPPED"],[30,41,91,20],[30,42,91,2],[32,0,92,2],[32,8,92,6,"asSkipped"],[32,17,92,2],[32,19,92,17],[33,0,93,4],[33,13,93,11],[34,0,94,6,"type"],[34,8,94,6,"type"],[34,12,94,10],[34,14,94,12],[34,23,93,11],[35,0,95,6,"count"],[35,8,95,6,"count"],[35,13,95,11],[35,15,95,13,"Number"],[35,21,95,19],[35,22,95,20,"parseInt"],[35,30,95,13],[35,31,95,29,"asSkipped"],[35,40,95,38],[35,41,95,39],[35,42,95,38],[35,43,95,13],[35,45,95,43],[35,47,95,13],[36,0,93,11],[36,7,93,4],[37,0,97,3],[38,0,98,1],[40,0,100,0,"module"],[40,2,100,0,"module"],[40,8,100,6],[40,9,100,7,"exports"],[40,16,100,0],[40,19,100,17],[40,28,100,26,"parseHermesStack"],[40,44,100,17],[40,45,100,43,"stack"],[40,50,100,17],[40,52,100,77],[41,0,101,2],[41,8,101,8,"lines"],[41,13,101,13],[41,16,101,16,"stack"],[41,21,101,21],[41,22,101,22,"split"],[41,27,101,16],[41,28,101,28],[41,32,101,16],[41,33,101,2],[42,0,102,2],[42,8,102,6,"entries"],[42,15,102,13],[42,18,102,16],[42,20,102,2],[43,0,103,2],[43,8,103,6,"lastMessageLine"],[43,23,103,21],[43,26,103,24],[43,27,103,25],[43,28,103,2],[45,0,104,2],[45,9,104,7],[45,13,104,11,"i"],[45,14,104,12],[45,17,104,15],[45,18,104,2],[45,20,104,18,"i"],[45,21,104,19],[45,24,104,22,"lines"],[45,29,104,27],[45,30,104,28,"length"],[45,36,104,2],[45,38,104,36],[45,40,104,38,"i"],[45,41,104,2],[45,43,104,41],[46,0,105,4],[46,10,105,10,"line"],[46,14,105,14],[46,17,105,17,"lines"],[46,22,105,22],[46,23,105,23,"i"],[46,24,105,22],[46,25,105,4],[48,0,106,4],[48,10,106,8],[48,11,106,9,"line"],[48,15,106,4],[48,17,106,15],[49,0,107,6],[50,0,108,5],[52,0,109,4],[52,10,109,10,"entry"],[52,15,109,15],[52,18,109,18,"parseLine"],[52,27,109,27],[52,28,109,28,"line"],[52,32,109,27],[52,33,109,4],[54,0,110,4],[54,10,110,8,"entry"],[54,15,110,4],[54,17,110,15],[55,0,111,6,"entries"],[55,8,111,6,"entries"],[55,15,111,13],[55,16,111,14,"push"],[55,20,111,6],[55,21,111,19,"entry"],[55,26,111,6],[56,0,112,6],[57,0,113,5],[59,0,115,4,"lastMessageLine"],[59,6,115,4,"lastMessageLine"],[59,21,115,19],[59,24,115,22,"i"],[59,25,115,4],[60,0,116,4,"entries"],[60,6,116,4,"entries"],[60,13,116,11],[60,16,116,14],[60,18,116,4],[61,0,117,3],[63,0,118,2],[63,8,118,8,"message"],[63,15,118,15],[63,18,118,18,"lines"],[63,23,118,23],[63,24,118,24,"slice"],[63,29,118,18],[63,30,118,30],[63,31,118,18],[63,33,118,33,"lastMessageLine"],[63,48,118,48],[63,51,118,51],[63,52,118,18],[63,54,118,54,"join"],[63,58,118,18],[63,59,118,59],[63,63,118,18],[63,64,118,2],[64,0,119,2],[64,11,119,9],[65,0,119,10,"message"],[65,6,119,10,"message"],[65,13,119,17],[65,15,119,10,"message"],[65,22,119,9],[66,0,119,19,"entries"],[66,6,119,19,"entries"],[66,13,119,26],[66,15,119,19,"entries"],[67,0,119,9],[67,5,119,2],[68,0,120,1],[68,3,100,0]],"functionMap":{"names":["<global>","parseLine","parseHermesStack"],"mappings":"AAA;ACkE;CD+B;iBEE;CFoB"}},"type":"js/module"}]}