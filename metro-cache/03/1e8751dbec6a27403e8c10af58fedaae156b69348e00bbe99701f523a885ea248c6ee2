{"dependencies":[{"name":"./isSymbol","data":{"asyncType":null,"locs":[{"start":{"line":47,"column":6},"end":{"line":47,"column":21}}]}},{"name":"./isObject","data":{"asyncType":null,"locs":[{"start":{"line":50,"column":6},"end":{"line":50,"column":21}},{"start":{"line":52,"column":12},"end":{"line":52,"column":27}}]}},{"name":"./_baseTrim","data":{"asyncType":null,"locs":[{"start":{"line":57,"column":10},"end":{"line":57,"column":25}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var NAN = 0 / 0;\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  var reIsBinary = /^0b[01]+$/i;\n  var reIsOctal = /^0o[0-7]+$/i;\n  var freeParseInt = parseInt;\n\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n\n    if (_$$_REQUIRE(_dependencyMap[0], \"./isSymbol\")(value)) {\n      return NAN;\n    }\n\n    if (_$$_REQUIRE(_dependencyMap[1], \"./isObject\")(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = _$$_REQUIRE(_dependencyMap[1], \"./isObject\")(other) ? other + '' : other;\n    }\n\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n\n    value = _$$_REQUIRE(_dependencyMap[2], \"./_baseTrim\")(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n\n  module.exports = toNumber;\n});","lineCount":32,"map":[[2,0,6,0],[2,6,6,4,"NAN"],[2,9,6,7],[2,12,6,10],[2,16,6,14],[2,17,6,0],[3,0,9,0],[3,6,9,4,"reIsBadHex"],[3,16,9,14],[3,19,9,17],[3,39,9,0],[4,0,12,0],[4,6,12,4,"reIsBinary"],[4,16,12,14],[4,19,12,17],[4,31,12,0],[5,0,15,0],[5,6,15,4,"reIsOctal"],[5,15,15,13],[5,18,15,16],[5,31,15,0],[6,0,18,0],[6,6,18,4,"freeParseInt"],[6,18,18,16],[6,21,18,19,"parseInt"],[6,29,18,0],[8,0,43,0],[8,11,43,9,"toNumber"],[8,19,43,0],[8,20,43,18,"value"],[8,25,43,0],[8,27,43,25],[9,0,44,2],[9,8,44,6],[9,15,44,13,"value"],[9,20,44,6],[9,24,44,22],[9,32,44,2],[9,34,44,32],[10,0,45,4],[10,13,45,11,"value"],[10,18,45,4],[11,0,46,3],[13,0,47,2],[13,8,47,6],[13,53,47,15,"value"],[13,58,47,6],[13,59,47,2],[13,61,47,23],[14,0,48,4],[14,13,48,11,"NAN"],[14,16,48,4],[15,0,49,3],[17,0,50,2],[17,8,50,6],[17,53,50,15,"value"],[17,58,50,6],[17,59,50,2],[17,61,50,23],[18,0,51,4],[18,10,51,8,"other"],[18,15,51,13],[18,18,51,16],[18,25,51,23,"value"],[18,30,51,28],[18,31,51,29,"valueOf"],[18,38,51,16],[18,42,51,40],[18,52,51,16],[18,55,51,53,"value"],[18,60,51,58],[18,61,51,59,"valueOf"],[18,68,51,53],[18,70,51,16],[18,73,51,71,"value"],[18,78,51,4],[19,0,52,4,"value"],[19,6,52,4,"value"],[19,11,52,9],[19,14,52,12],[19,59,52,21,"other"],[19,64,52,12],[19,68,52,31,"other"],[19,73,52,36],[19,76,52,39],[19,78,52,12],[19,81,52,45,"other"],[19,86,52,4],[20,0,53,3],[22,0,54,2],[22,8,54,6],[22,15,54,13,"value"],[22,20,54,6],[22,24,54,22],[22,32,54,2],[22,34,54,32],[23,0,55,4],[23,13,55,11,"value"],[23,18,55,16],[23,23,55,21],[23,24,55,11],[23,27,55,25,"value"],[23,32,55,11],[23,35,55,33],[23,36,55,34,"value"],[23,41,55,4],[24,0,56,3],[26,0,57,2,"value"],[26,4,57,2,"value"],[26,9,57,7],[26,12,57,10],[26,58,57,19,"value"],[26,63,57,10],[26,64,57,2],[27,0,58,2],[27,8,58,6,"isBinary"],[27,16,58,14],[27,19,58,17,"reIsBinary"],[27,29,58,27],[27,30,58,28,"test"],[27,34,58,17],[27,35,58,33,"value"],[27,40,58,17],[27,41,58,2],[28,0,59,2],[28,11,59,10,"isBinary"],[28,19,59,18],[28,23,59,22,"reIsOctal"],[28,32,59,31],[28,33,59,32,"test"],[28,37,59,22],[28,38,59,37,"value"],[28,43,59,22],[28,44,59,9],[28,47,60,6,"freeParseInt"],[28,59,60,18],[28,60,60,19,"value"],[28,65,60,24],[28,66,60,25,"slice"],[28,71,60,19],[28,72,60,31],[28,73,60,19],[28,74,60,18],[28,76,60,35,"isBinary"],[28,84,60,43],[28,87,60,46],[28,88,60,43],[28,91,60,50],[28,92,60,18],[28,93,59,9],[28,96,61,7,"reIsBadHex"],[28,106,61,17],[28,107,61,18,"test"],[28,111,61,7],[28,112,61,23,"value"],[28,117,61,7],[28,121,61,32,"NAN"],[28,124,61,7],[28,127,61,38],[28,128,61,39,"value"],[28,133,59,2],[29,0,62,1],[31,0,64,0,"module"],[31,2,64,0,"module"],[31,8,64,6],[31,9,64,7,"exports"],[31,16,64,0],[31,19,64,17,"toNumber"],[31,27,64,0]],"functionMap":{"names":["<global>","toNumber"],"mappings":"AAA;AC0C;CDmB"}},"type":"js/module"}]}